{"mappings":"AAKAA,OAAOC,UAAUC,OAAM,WACrBC,GAAGC,MAAMC,UACP,+BACA,SAWA,SAAUC,EAAQC,EAAOC,EAAQC,GAC/B,IACEC,EADEC,EAAa,GA8DjB,OA3DIJ,EAAMK,UACRL,EAAM,eACJ,YAAcA,EAAMK,SAAW,WAAaL,EAAMK,QAC9C,IACAC,SAASN,EAAMK,QAAS,IAE9BL,EAAM,cAAgBA,EAAMK,QAAQE,SAAS,UAAY,SAAW,UAGlE,qBAAuBL,IACzBH,GAAUE,EAAOO,QAAU,IAE3BC,EAAEC,KAAKV,GAAO,SAAUW,EAAKC,GACvBX,EAAOY,QAAUD,IAAQX,EAAOY,QAIhC,YAAcD,IASd,KALJT,EAAiBW,OAAOC,iBAAiBC,KAAKC,aAC5ChB,EACAU,MAIAZ,GAAUa,EAAM,IAAMT,EAAiB,QAI3CJ,GAAU,KAGLU,EAAES,YAAYJ,OAAOK,UAAYnB,EAAM,iBAE1CI,EAAaJ,EAAM,eAAeoB,QAAO,MAAQ,UAE7CpB,EAAMK,UACJ,YAAcL,EAAMK,QACtBD,GAAc,OACL,WAAaJ,EAAMK,QAC5BD,GAAc,QAEdA,GAAc,IAAMJ,EAAMK,SAI9BD,GACE,sIAEFU,OAAOK,QAAQE,KAAK,CAClBC,OAAQ,CACNC,SAAU,CAACnB,QAMZL","sources":["src/preview.js"],"sourcesContent":["/**\n * Hook in the kirkiPostMessageStylesOutput filter.\n *\n * Handles postMessage styles for typography controls.\n */\njQuery(document).ready(function () {\n  wp.hooks.addFilter(\n    \"kirkiPostMessageStylesOutput\",\n    \"kirki\",\n\n    /**\n     * Append styles for this control.\n     *\n     * @param {string} styles      - The styles.\n     * @param {Object} value       - The control value.\n     * @param {Object} output      - The control's \"output\" argument.\n     * @param {string} controlType - The control type.\n     * @returns {string} - Returns the CSS as a string.\n     */\n    function (styles, value, output, controlType) {\n      var googleFont = \"\",\n        processedValue;\n\n      if (value.variant) {\n        value[\"font-weight\"] =\n          \"regular\" === value.variant || \"italic\" === value.variant\n            ? 400\n            : parseInt(value.variant, 10);\n\n        value[\"font-style\"] = value.variant.includes(\"italic\") ? \"italic\" : \"normal\";\n      }\n\n      if (\"kirki-typography\" === controlType) {\n        styles += output.element + \"{\";\n\n        _.each(value, function (val, key) {\n          if (output.choice && key !== output.choice) {\n            return;\n          }\n\n          if (\"variant\" === key) {\n            return;\n          }\n\n          processedValue = window.kirkiPostMessage.util.processValue(\n            output,\n            val\n          );\n\n          if (false !== processedValue) {\n            styles += key + \":\" + processedValue + \";\";\n          }\n        });\n\n        styles += \"}\";\n\n        // Check if this is a googlefont so that we may load it.\n        if (!_.isUndefined(window.WebFont) && value[\"font-family\"]) {\n          // Calculate the googlefont params.\n          googleFont = value[\"font-family\"].replace(/\\\"/g, \"&quot;\"); // eslint-disable-line no-useless-escape\n\n          if (value.variant) {\n            if (\"regular\" === value.variant) {\n              googleFont += \":400\";\n            } else if (\"italic\" === value.variant) {\n              googleFont += \":400i\";\n            } else {\n              googleFont += \":\" + value.variant;\n            }\n          }\n\n          googleFont +=\n            \":cyrillic,cyrillic-ext,devanagari,greek,greek-ext,khmer,latin,latin-ext,vietnamese,hebrew,arabic,bengali,gujarati,tamil,telugu,thai\";\n\n          window.WebFont.load({\n            google: {\n              families: [googleFont],\n            },\n          });\n        }\n      }\n\n      return styles;\n    }\n  );\n});\n"],"names":["jQuery","document","ready","wp","hooks","addFilter","styles","value","output","controlType","processedValue","googleFont","variant","parseInt","includes","element","_","each","val","key","choice","window","kirkiPostMessage","util","processValue","isUndefined","WebFont","replace","load","google","families"],"version":3,"file":"preview.js.map"}