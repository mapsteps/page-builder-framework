{"mappings":"gBA4OWA,EA1NTC,GAAGC,UAAUC,oBAAsBF,GAAGC,UAAUE,QAAQC,OAAO,CAC7DC,WAAY,SAAUC,EAAIC,GACxB,IASIC,EATAC,EAAUC,KACVC,EAAOJ,GAAW,GAUtB,GARAI,EAAKC,OAASD,EAAKC,QAAU,GAExBD,EAAKC,OAAOC,OACfF,EAAKC,OAAOC,KAAO,iBAKjBF,EAAKG,QAAS,CAChB,IAAIC,EAASJ,EAAKG,QAAQE,MAAM,WAChCD,EAASA,EAAO,GAAGC,MAAM,KACzBR,EAAYO,EAAO,QAEnBP,EAAY,uCAAyCG,EAAKC,OAAOC,MAG9DF,EAAKC,OAAOK,eAAiBN,EAAKC,OAAOM,eAC5CP,EAAKC,OAAOK,cAAgBN,EAAKC,OAAOM,cAI1CP,EAAKC,OAAOE,QAAUK,OAAO,aAC7BR,EAAKC,OAAOE,QAAQM,KAClB,KACA,qBAAuBd,EAAGe,QAAO,KAAO,IAAIA,QAAO,MAAQ,MAE7DV,EAAKC,OAAOE,QAAQM,KAAK,QAASZ,GAElCc,EAAEC,KAAKZ,EAAKC,OAAOK,eAAe,SAAUO,EAAKC,GAC3C,UAAYA,IACdD,EAAMA,EAAIH,QAAQ,kBAAmBb,IAGvCG,EAAKC,OAAOE,QAAQM,KAAKK,EAAKD,MAGhCf,EAAQiB,iBAAmB,GAC3B1B,GAAGC,UAAUE,QAAQwB,UAAUtB,WAAWuB,KAAKnB,EAASH,EAAIK,GAC5DX,GAAG6B,MAAMC,SAAS,kCAAmCxB,EAAIG,EAASE,IAYpEoB,uBAAwB,WACtB,IAAItB,EAAUC,KACJD,EAAQuB,UAAUC,KAAK,iCAE3BV,MAAK,WACT,IAAIW,EAAOf,OAAOT,MAElBV,GAAGC,UAAUiC,EAAKC,KAAK,yBAAyB,SAAUC,GACxD,IAAIC,EAAU,IAAIrC,GAAGC,UAAUqC,QAAQJ,GACvCzB,EAAQ8B,SAASC,KAAKH,GACtBA,EAAQI,KAAKL,GACbC,EAAQK,IAAIN,YAWlBO,2BAA4B,WAC1B,IAAIlC,EAAUC,KAGTD,EAAQ2B,SAIL3B,EAAQuB,UAAUC,KAAK,0CAEzBV,MAAK,WACT,IACEc,EADEH,EAAOf,OAAOT,MAEhBkC,EAAeV,EAAKC,KAAK,gCAE3BE,EAAU,IAAIrC,GAAGC,UAAUqC,QAAQJ,GACnCzB,EAAQiB,iBAAiBc,KAAKH,GAC9BA,EAAQK,IAAIjC,EAAQ2B,UAAUQ,IAE9BP,EAAQQ,MAAK,SAAUC,GACrB,IAAIC,EAAatC,EAAQ2B,UACrBU,IAAqBC,EAAWH,MAGpCG,EAAazB,EAAE0B,MAAMD,IACVH,GAAgBE,EAC3BrC,EAAQ2B,QAAQM,IAAIK,OAEtBtC,EAAQ2B,QAAQS,MAAK,SAAUI,GACzBA,EAASL,KAAkBP,EAAQa,OACrCb,EAAQK,IAAIO,EAASL,WAS7BO,MAAO,WACL,IAAI1C,EAAUC,KAEdD,EAAQsB,yBACRtB,EAAQkC,6BAER3C,GAAGC,UAAUE,QAAQwB,UAAUwB,MAAMvB,KAAKnB,GAE1CA,EAAQ2C,SAASC,SAASC,MAAK,WAC7B7C,EAAQ8C,mBACRvD,GAAG6B,MAAMC,SACP,oDACArB,MAGJT,GAAG6B,MAAMC,SAAS,mCAAoCrB,IAYxD+C,MAAO,WACL,IAAI/C,EAAUC,KACZ+C,EAAYhD,EAAQiD,UAEjBD,IAILzD,GAAGC,UAAUyD,QAAQD,GAAW,SAAUC,GAEtC,mBAAqBA,EAAQ9C,OAAOC,MACpC6C,EAAQC,YACR3D,GAAGC,UAAU2D,SAASC,UAAUpD,UAAYA,EAAQH,GAEpDG,EAAQqD,gBAERJ,EAAQC,SAASd,MAAK,SAAUc,GAC1BA,GACFlD,EAAQqD,sBAKhB9D,GAAG6B,MAAMC,SAAS,mCAAoCrB,KAWxDqD,cAAe,WACb,IAAIrD,EAAUC,KACV,aAAeD,EAAQ2C,SAASC,SAASU,UAG7CtD,EAAQuD,gBACRvD,EAAQ2C,SAASC,SAASY,UAC1BjE,GAAG6B,MAAMC,SAAS,2CAA4CrB,KAShEyD,MAAO,SAAUvD,GACf,IAAIF,EAAUC,KACdD,EAAQqD,gBACR9D,GAAGC,UAAUE,QAAQwB,UAAUuC,MAAMtC,KAAKnB,EAASE,GACnDX,GAAG6B,MAAMC,SAAS,mCAAoCrB,IASxD8C,iBAAkB,SAAU9C,GAC1BA,EAAUA,GAAWC,KACrBV,GAAG6B,MAAMC,SAAS,wCAAyCpB,MAG3DD,EAAQuB,UAAUmC,GAAG,2BAA4B,SAAS,WACxD1D,EAAQ2B,QAAQM,IAAIvB,OAAOT,MAAMc,cAM9BzB,EA2ERC,GAAGC,WAnEAmE,MAAMzC,UAAUe,IAAM,SAAU2B,GAClC,IACEC,EACAC,EAFEC,EAAO9D,KAAK+D,OAQhB,OAJAJ,EAAK3D,KAAKgE,QAAQC,MAAMjE,KAAMkE,WAI1B,QAHJP,EAAK3D,KAAKmE,SAASR,KAGA/C,EAAEwD,QAAQN,EAAMH,KAQjC3D,KAAKJ,IACLP,EAAIU,QAAQC,KAAKJ,KACjBP,EAAIU,QAAQC,KAAKJ,IAAIM,QACrBb,EAAIU,QAAQC,KAAKJ,IAAIM,OAAOmE,iBAE5BT,EAAgBvE,EAAIU,QAAQC,KAAKJ,IAAIM,OAAOmE,gBAC5CR,EAAS,IACF7D,KAAKJ,GAAGe,QAAQiD,EAAgB,IAAK,IAAIjD,QAAQ,IAAK,KAAOgD,EACpEtE,EACGU,QAAQ6D,GACRlC,QAAQM,IACPvB,OAAOf,OAAO,GAAIL,EAAIU,QAAQ6D,GAAelC,QAAQqC,OAAQF,KAQnE7D,KAAK+D,OAASJ,EACd3D,KAAKsE,QAAS,EAEdtE,KAAKuE,UAAUC,SAASxE,KAAM,CAAC2D,EAAIG,KA7B1B9D,MAuCXX,EAAIqE,MAAMzC,UAAUuB,IAAM,WAExB,IAAIoB,EACJ,OACE5D,KAAKJ,IACLP,EAAIU,QAAQC,KAAKJ,KACjBP,EAAIU,QAAQC,KAAKJ,IAAIM,QACrBb,EAAIU,QAAQC,KAAKJ,IAAIM,OAAOmE,gBAE5BT,EAAgBvE,EAAIU,QAAQC,KAAKJ,IAAIM,OAAOmE,eACrChF,EAAIU,QAAQ6D,GAAelC,QAAQc,MACxCxC,KAAKJ,GAAGe,QAAQiD,EAAgB,IAAK,IAAIjD,QAAQ,IAAK,MAKnDX,KAAK+D","sources":["src/dynamic-control.js"],"sourcesContent":["/**\n * The majority of the code in this file\n * is derived from the wp-customize-posts plugin\n * and the work of @westonruter to whom I am very grateful.\n *\n * @see https://github.com/xwp/wp-customize-posts\n */\n\n(function () {\n  \"use strict\";\n\n  /**\n   * A dynamic color-alpha control.\n   *\n   * @class\n   * @augments wp.customize.Control\n   * @augments wp.customize.Class\n   */\n  wp.customize.kirkiDynamicControl = wp.customize.Control.extend({\n    initialize: function (id, options) {\n      let control = this;\n      let args = options || {};\n\n      args.params = args.params || {};\n\n      if (!args.params.type) {\n        args.params.type = \"kirki-generic\";\n      }\n\n      let className;\n\n      if (args.content) {\n        let splits = args.content.split('class=\"');\n        splits = splits[1].split('\"');\n        className = splits[0];\n      } else {\n        className = \"customize-control customize-control-\" + args.params.type;\n      }\n\n      if (!args.params.wrapper_attrs && args.params.wrapper_atts) {\n        args.params.wrapper_attrs = args.params.wrapper_atts;\n      }\n\n      // Hijack the container to add wrapper_attrs.\n      args.params.content = jQuery(\"<li></li>\");\n      args.params.content.attr(\n        \"id\",\n        \"customize-control-\" + id.replace(/]/g, \"\").replace(/\\[/g, \"-\")\n      );\n      args.params.content.attr(\"class\", className);\n\n      _.each(args.params.wrapper_attrs, function (val, key) {\n        if (\"class\" === key) {\n          val = val.replace(\"{default_class}\", className);\n        }\n\n        args.params.content.attr(key, val);\n      });\n\n      control.propertyElements = [];\n      wp.customize.Control.prototype.initialize.call(control, id, args);\n      wp.hooks.doAction(\"kirki.dynamicControl.init.after\", id, control, args);\n    },\n\n    /**\n     * Add bidirectional data binding links between inputs and the setting(s).\n     *\n     * This is copied from wp.customize.Control.prototype.initialize(). It\n     * should be changed in Core to be applied once the control is embedded.\n     *\n     * @private\n     * @returns {void}\n     */\n    _setUpSettingRootLinks: function () {\n      var control = this,\n        nodes = control.container.find(\"[data-customize-setting-link]\");\n\n      nodes.each(function () {\n        var node = jQuery(this);\n\n        wp.customize(node.data(\"customizeSettingLink\"), function (setting) {\n          var element = new wp.customize.Element(node);\n          control.elements.push(element);\n          element.sync(setting);\n          element.set(setting());\n        });\n      });\n    },\n\n    /**\n     * Add bidirectional data binding links between inputs and the setting properties.\n     *\n     * @private\n     * @returns {void}\n     */\n    _setUpSettingPropertyLinks: function () {\n      var control = this,\n        nodes;\n\n      if (!control.setting) {\n        return;\n      }\n\n      nodes = control.container.find(\"[data-customize-setting-property-link]\");\n\n      nodes.each(function () {\n        var node = jQuery(this),\n          element,\n          propertyName = node.data(\"customizeSettingPropertyLink\");\n\n        element = new wp.customize.Element(node);\n        control.propertyElements.push(element);\n        element.set(control.setting()[propertyName]);\n\n        element.bind(function (newPropertyValue) {\n          var newSetting = control.setting();\n          if (newPropertyValue === newSetting[propertyName]) {\n            return;\n          }\n          newSetting = _.clone(newSetting);\n          newSetting[propertyName] = newPropertyValue;\n          control.setting.set(newSetting);\n        });\n        control.setting.bind(function (newValue) {\n          if (newValue[propertyName] !== element.get()) {\n            element.set(newValue[propertyName]);\n          }\n        });\n      });\n    },\n\n    /**\n     * @inheritdoc\n     */\n    ready: function () {\n      var control = this;\n\n      control._setUpSettingRootLinks();\n      control._setUpSettingPropertyLinks();\n\n      wp.customize.Control.prototype.ready.call(control);\n\n      control.deferred.embedded.done(function () {\n        control.initKirkiControl();\n        wp.hooks.doAction(\n          \"kirki.dynamicControl.ready.deferred.embedded.done\",\n          control\n        );\n      });\n      wp.hooks.doAction(\"kirki.dynamicControl.ready.after\", control);\n    },\n\n    /**\n     * Embed the control in the document.\n     *\n     * Override the embed() method to do nothing,\n     * so that the control isn't embedded on load,\n     * unless the containing section is already expanded.\n     *\n     * @returns {void}\n     */\n    embed: function () {\n      var control = this,\n        sectionId = control.section();\n\n      if (!sectionId) {\n        return;\n      }\n\n      wp.customize.section(sectionId, function (section) {\n        if (\n          \"kirki-expanded\" === section.params.type ||\n          section.expanded() ||\n          wp.customize.settings.autofocus.control === control.id\n        ) {\n          control.actuallyEmbed();\n        } else {\n          section.expanded.bind(function (expanded) {\n            if (expanded) {\n              control.actuallyEmbed();\n            }\n          });\n        }\n      });\n      wp.hooks.doAction(\"kirki.dynamicControl.embed.after\", control);\n    },\n\n    /**\n     * Deferred embedding of control when actually\n     *\n     * This function is called in Section.onChangeExpanded() so the control\n     * will only get embedded when the Section is first expanded.\n     *\n     * @returns {void}\n     */\n    actuallyEmbed: function () {\n      var control = this;\n      if (\"resolved\" === control.deferred.embedded.state()) {\n        return;\n      }\n      control.renderContent();\n      control.deferred.embedded.resolve(); // This triggers control.ready().\n      wp.hooks.doAction(\"kirki.dynamicControl.actuallyEmbed.after\", control);\n    },\n\n    /**\n     * This is not working with autofocus.\n     *\n     * @param {object} [args] Args.\n     * @returns {void}\n     */\n    focus: function (args) {\n      var control = this;\n      control.actuallyEmbed();\n      wp.customize.Control.prototype.focus.call(control, args);\n      wp.hooks.doAction(\"kirki.dynamicControl.focus.after\", control);\n    },\n\n    /**\n     * Additional actions that run on ready.\n     *\n     * @param {object} control - The control object. If undefined fallsback to the this.\n     * @returns {void}\n     */\n    initKirkiControl: function (control) {\n      control = control || this;\n      wp.hooks.doAction(\"kirki.dynamicControl.initKirkiControl\", this);\n\n      // Save the value\n      control.container.on(\"change keyup paste click\", \"input\", function () {\n        control.setting.set(jQuery(this).val());\n      });\n    },\n  });\n})();\n\n(function (api) {\n  /**\n   * Set the value and trigger all bound callbacks.\n   *\n   * @since 1.0\n   * @param {object} to - New value.\n   * @returns {Object} - this\n   */\n  api.Value.prototype.set = function (to) {\n    var from = this._value,\n      parentSetting,\n      newVal;\n\n    to = this._setter.apply(this, arguments);\n    to = this.validate(to);\n\n    // Bail if the sanitized value is null or unchanged.\n    if (null === to || _.isEqual(from, to)) {\n      return this;\n    }\n\n    /**\n     * Start Kirki mod.\n     */\n    if (\n      this.id &&\n      api.control(this.id) &&\n      api.control(this.id).params &&\n      api.control(this.id).params.parent_setting\n    ) {\n      parentSetting = api.control(this.id).params.parent_setting;\n      newVal = {};\n      newVal[this.id.replace(parentSetting + \"[\", \"\").replace(\"]\", \"\")] = to;\n      api\n        .control(parentSetting)\n        .setting.set(\n          jQuery.extend({}, api.control(parentSetting).setting._value, newVal)\n        );\n    }\n\n    /**\n     * End Kirki mod.\n     */\n\n    this._value = to;\n    this._dirty = true;\n\n    this.callbacks.fireWith(this, [to, from]);\n\n    return this;\n  };\n\n  /**\n   * Get the value.\n   *\n   * @returns {mixed} - Returns the value.\n   */\n  api.Value.prototype.get = function () {\n    // Start Kirki mod.\n    var parentSetting;\n    if (\n      this.id &&\n      api.control(this.id) &&\n      api.control(this.id).params &&\n      api.control(this.id).params.parent_setting\n    ) {\n      parentSetting = api.control(this.id).params.parent_setting;\n      return api.control(parentSetting).setting.get()[\n        this.id.replace(parentSetting + \"[\", \"\").replace(\"]\", \"\")\n      ];\n    }\n    // End Kirki mod.\n\n    return this._value;\n  };\n})(wp.customize);\n"],"names":["api","wp","customize","kirkiDynamicControl","Control","extend","initialize","id","options","className","control","this","args","params","type","content","splits","split","wrapper_attrs","wrapper_atts","jQuery","attr","replace","_","each","val","key","propertyElements","prototype","call","hooks","doAction","_setUpSettingRootLinks","container","find","node","data","setting","element","Element","elements","push","sync","set","_setUpSettingPropertyLinks","propertyName","bind","newPropertyValue","newSetting","clone","newValue","get","ready","deferred","embedded","done","initKirkiControl","embed","sectionId","section","expanded","settings","autofocus","actuallyEmbed","state","renderContent","resolve","focus","on","Value","to","parentSetting","newVal","from","_value","_setter","apply","arguments","validate","isEqual","parent_setting","_dirty","callbacks","fireWith"],"version":3,"file":"control.js.map"}